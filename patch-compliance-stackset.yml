AWSTemplateFormatVersion: "2010-09-09"
Description: |
  This template centralises patch compliance information:
  - Enable and configure AWS Config
  - Configure AWS Systems Manager Patch Manager
  - Configure AWS Sytems Manager resource data sync
  - Create and distribute custom AWS Config conformance packs
  - Create AWS Config Authorization Aggregator
  - Create a partitioned Amazon Athena table for AWS Config data
  - Create an AWS Lambda function to update the Athena Table
  - Create Amazon Athena Queries
  - Create and run AWS Lambda function to generate Amazon QuickSight dashboards
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "AWS Config"
        Parameters: 
          - ConfigBucket
          - AllSupported
          - IncludeGlobalResourceTypes
          - ResourceTypes
          - DeliveryChannelName
          - Frequency
          - TopicArn
          - NotificationEmail          
      - Label: 
          default: "AWS Systems Manager"
        Parameters: 
          - PatchOperation
          - Owner
          - DataSyncBucket
          - DataSyncBucketRegion          
    ParameterLabels: 
      ConfigBucket: 
        default: "S3 Bucket (see outputs of parent stack)"
      AllSupported:
        default: Support all resource types
      IncludeGlobalResourceTypes:
        default: Include global resource types
      ResourceTypes:
        default: List of resource types if not all supported
      DeliveryChannelName:
        default: Configuration delivery channel name
      Frequency:
        default: Snapshot delivery frequency
      TopicArn:
        default: SNS topic name
      NotificationEmail:
        default: Notification Email (optional)
      PatchOperation:
        default: Scan or Install Patches
      Owner:
        default: Patching Owner Information       
      DataSyncBucket:
        default: "SSM Inventory Sync Bucket (see outputs of parent stack)"
      DataSyncBucketRegion:
        default: "SSM Inventory Sync Bucket Region (see outputs of parent stack)"

Parameters: 
  ConfigBucket: 
    AllowedPattern: ^[0-9a-z]+([0-9a-z-\.]*[0-9a-z])$
    ConstraintDescription: "Malformed input-Parameter ConfigBucket must follow rules for bucket naming. See https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html for more information."
    MinLength: 3
    MaxLength: 63
    Type: String
    Description: "Enter the name of the Amazon S3 bucket used to store AWS Config Data"

  DataSyncBucket: 
    AllowedPattern: ^[0-9a-z]+([0-9a-z-\.]*[0-9a-z])$
    ConstraintDescription: "Malformed input-Parameter ConfigBucket must follow rules for bucket naming. See https://docs.aws.amazon.com/AmazonS3/latest/dev/BucketRestrictions.html for more information."
    MinLength: 3
    MaxLength: 63
    Type: String
    Description: "Enter the name of the Amazon S3 bucket used to store SSM Inventory Sync Data"   

  DataSyncBucketRegion:
    Type: String
    Description: The region of the SSM Inventory Sync Bucket.

  AllSupported:
    Type: String
    Default: True
    Description: Indicates whether to record all supported resource types.
    AllowedValues:
      - True
      - False

  IncludeGlobalResourceTypes:
    Type: String
    Default: True
    Description: Indicates whether AWS Config records all supported global resource types.
    AllowedValues:
      - True
      - False

  ResourceTypes:
    Type: List<String>
    Description: A list of valid AWS resource types to include in this recording group, such as AWS::EC2::Instance or AWS::CloudTrail::Trail.
    Default: <All>

  DeliveryChannelName:
    Type: String
    Default: <Generated>
    Description: The name of the delivery channel.

  Frequency:
    Type: String
    Default: 24hours
    Description: The frequency with which AWS Config delivers configuration snapshots.
    AllowedValues:
      - 1hour
      - 3hours
      - 6hours
      - 12hours
      - 24hours

  TopicArn:
    Type: String
    Default: <New Topic>
    Description: The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (Amazon SNS) topic that AWS Config delivers notifications to.

  NotificationEmail:
    Type: String
    Default: <None>
    Description: Email address for AWS Config notifications (for new topics).

  PatchOperation:
    Type: String
    Default: Scan
    Description: Perform a scan or install patches
    AllowedValues:
      - Scan
      - Install   

  PatchRebootOption:
    Type: String
    Default: NoReboot
    Description: Reboot behavior after a patch Install operation. If you choose NoReboot and patches are installed, the instance is marked as non-compliant until a subsequent reboot and scan.
    AllowedValues:
      - NoReboot
      - RebootIfNeeded     

  Owner:
    Type: String
    Default: <None>
    Description: A user-provided value that will be included in any CloudWatch events that are raised while running tasks in the patching maintenance window.

Conditions:
  IsAllSupported: !Equals
    - !Ref AllSupported
    - True
  IsGeneratedDeliveryChannelName: !Equals
    - !Ref DeliveryChannelName
    - <Generated>
  CreateTopic: !Equals
    - !Ref TopicArn
    - <New Topic>
  CreateSubscription: !And
    - !Condition CreateTopic
    - !Not
      - !Equals
        - !Ref NotificationEmail
        - <None>

Mappings:
  Settings:
    FrequencyMap:
      1hour   : One_Hour
      3hours  : Three_Hours
      6hours  : Six_Hours
      12hours : Twelve_Hours
      24hours : TwentyFour_Hours

Outputs:
  InstancesTagged:
    Description: The number of managed instances tagged by the Lambda function
    Value: !GetAtt EC2Tagging.InstancesTagged

Resources:
  ConfigTopic:
    Condition: CreateTopic
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "config-topic-${AWS::AccountId}"
      DisplayName: AWS Config Notification Topic

  ConfigTopicPolicy:
    Condition: CreateTopic
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref ConfigTopic
      PolicyDocument:
        Statement:
          - Sid: AWSConfigSNSPolicy
            Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref ConfigTopic
            Principal:
              Service:
                - config.amazonaws.com

  EmailNotification:
    Condition: CreateSubscription
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !Ref NotificationEmail
      Protocol: email
      TopicArn: !Ref ConfigTopic

  ConfigRecorderRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRole

  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    DependsOn:
      - ConfigTopicPolicy
    Properties:
      RoleARN: !GetAtt ConfigRecorderRole.Arn
      RecordingGroup:
        AllSupported: !Ref AllSupported
        IncludeGlobalResourceTypes: !Ref IncludeGlobalResourceTypes
        ResourceTypes: !If
          - IsAllSupported
          - !Ref AWS::NoValue
          - !Ref ResourceTypes

  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    DependsOn:
      - ConfigTopicPolicy
    Properties:
      Name: !If
        - IsGeneratedDeliveryChannelName
        - !Ref AWS::NoValue
        - !Ref DeliveryChannelName
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: !FindInMap
          - Settings
          - FrequencyMap
          - !Ref Frequency
      S3BucketName: !Ref ConfigBucket
      SnsTopicARN: !If
        - CreateTopic
        - !Ref ConfigTopic
        - !Ref TopicArn

  UpdateSSMAgentAssociation:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: UpdateSSMAgent
      ComplianceSeverity: CRITICAL
      Name: AWS-UpdateSSMAgent
      ScheduleExpression: rate(1 hour)      
      Targets:
        - 
          Key: InstanceIds
          Values:
            - "*"
      WaitForSuccessTimeoutSeconds: 600

  GatherSoftwareInventoryAssociation:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: GatherSoftwareInventory
      ComplianceSeverity: MEDIUM
      Name: AWS-GatherSoftwareInventory
      ScheduleExpression: rate(1 hour)      
      Targets:
        - 
          Key: InstanceIds
          Values:
            - "*" 

  RunPatchBaselineAssociation:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: RunPatchBaseline
      ComplianceSeverity: CRITICAL
      Name: AWS-RunPatchBaseline   
      Parameters:
        Operation:
          - !Ref PatchOperation
        RebootOption:
          - !Ref PatchRebootOption  
      ScheduleExpression: rate(1 hour)       
      Targets:
        - 
          Key: InstanceIds
          Values:
            - "*"

  PatchAWSSSMMaintenanceWindow:
    Type: 'AWS::SSM::MaintenanceWindow'
    Properties:
        Description: Maintenance Window for Patching
        AllowUnassociatedTargets: false
        Cutoff: 1
        Schedule: cron(0 2 ? * TUE#2 *)
        Duration: 4
        ScheduleOffset: 4
        Name: PatchingMaintenanceWindow

  PatchAWSSSMMaintenanceWindowTarget:
    Type: 'AWS::SSM::MaintenanceWindowTarget'
    Properties:
        OwnerInformation: !Ref Owner
        Description: Maintenance Windows Target for Patching
        WindowId: !Ref PatchAWSSSMMaintenanceWindow
        ResourceType: INSTANCE
        Targets:
          - 
            Key: tag:PlatformType
            Values:
              - "Windows"
              - "Linux"              
        Name: PatchingMaintenanceWindowTarget

  PatchAWSSSMMaintenanceWindowTask:
    Type: 'AWS::SSM::MaintenanceWindowTask'
    Properties:
        MaxErrors: "2"
        Description: PatchingMaintenanceWindowTask
        Priority: 0
        MaxConcurrency: "5"
        Targets:
          - 
            Key: WindowTargetIds
            Values:
              - !Ref PatchAWSSSMMaintenanceWindowTarget
        Name: PatchingMaintenanceWindowTask
        TaskArn: AWS-RunPatchBaseline
        TaskInvocationParameters:
            MaintenanceWindowRunCommandParameters:
                Comment: Run Patch Baseline
                Parameters:
                  Operation:
                    - !Ref PatchOperation
                  RebootOption:
                    - !Ref PatchRebootOption                 
                DocumentHashType: Sha256
                DocumentHash: ce0089afcc0a9c91d5e8a1363dfce022880d2e6d64c23975b66daaadf5c57e6f
        WindowId: !Ref PatchAWSSSMMaintenanceWindow
        TaskType: RUN_COMMAND

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:"          
          - Effect: Allow
            Action:
            - ec2:CreateTags
            Resource: arn:aws:ec2:*:*:instance/*
          - Effect: Allow
            Action: ssm:DescribeInstanceInformation
            Resource: "*"
          - Effect: Allow
            Action: xray:PutTraceSegments
            Resource: "*"              

  EC2TaggingFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import json
          import logging
          import cfnresponse

          ssm = boto3.client('ssm')
          ec2 = boto3.client('ec2')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)     

          def handler(event, context): 
              # set token to empty string
              token = ''
              
              # set response value to 0
              responseValue = 0
            
              while True:
                  # Limit to 50 due to describe limit
                  response = ssm.describe_instance_information(
                      MaxResults=50,
                      NextToken = token
                  )
                  
                  for instanceInfo in response['InstanceInformationList']:
                      # Create empty instances array
                      instances = []                  
                      instanceId = instanceInfo['InstanceId']
                      logger.info('InstanceID: ' + instanceId)  
                      instances.append(instanceId) 
                      platformType = instanceInfo['PlatformType']
                      logger.info('OS type: ' + platformType)
                      osName = instanceInfo['PlatformName']
                      logger.info('OS name: ' + osName)
                      osVersion = instanceInfo['PlatformVersion']
                      logger.info('OS version: ' + osVersion)
                      logger.info('---')
                      
                      responseValue += 1
                                          
                      tagResponse = ec2.create_tags(
                          Resources = instances,
                          Tags = [
                              {
                                  'Key': 'PlatformType',
                                  'Value': platformType
                              },
                              {
                                  'Key': 'OSName',
                                  'Value': osName
                              },    
                              {
                                  'Key': 'OSVersion',
                                  'Value': osVersion
                              },                   
                          ]
                      )           
                      
                  if 'NextToken' not in response: break    
                  token = response['NextToken']
                  logger.info('Token: ' + token) 
              responseData = {}
              responseData['InstancesTagged'] = responseValue
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, "CustomResourcePhysicalID")      
      Handler: index.handler
      Runtime: python3.7
      Timeout: 600
      Role: !GetAtt LambdaExecutionRole.Arn
      TracingConfig:
        Mode: Active      

  EC2Tagging:
    Type: Custom::Function
    Properties:
      ServiceToken: !GetAtt EC2TaggingFunction.Arn
      Region: !Ref "AWS::Region"

  ResourceDataSync:
    Type: AWS::SSM::ResourceDataSync
    Properties:
      SyncName: patch-compliance-sync
      SyncType: SyncToDestination
      S3Destination:
        BucketName: !Ref DataSyncBucket
        BucketRegion: !Ref DataSyncBucketRegion
        SyncFormat: JsonSerDe        